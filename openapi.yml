openapi: 3.0.0
info:
  title: Hack4Vilnius 2025 Backend API
  description: Backend server API with Express, TypeScript, and TypeORM using modularized monolith architecture
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags:
        - System
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running

  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - firstName
                - lastName
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
                firstName:
                  type: string
                  example: John
                lastName:
                  type: string
                  example: Doe
                address:
                  type: string
                  nullable: true
                  example: 123 Main St
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  id:
                    type: string
                    format: uuid
                    example: 550e8400-e29b-41d4-a716-446655440000
                  email:
                    type: string
                    example: user@example.com
                  firstName:
                    type: string
                    example: John
                  lastName:
                    type: string
                    example: Doe
                  address:
                    type: string
                    nullable: true
                    example: 123 Main St
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request - Missing required fields or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and registration endpoints

