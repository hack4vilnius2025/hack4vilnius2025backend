openapi: 3.0.0
info:
  title: Hack4Vilnius 2025 Backend API
  description: Backend server API with Express, TypeScript, and TypeORM using modularized monolith architecture
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags:
        - System
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running

  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
                name:
                  type: string
                  example: John Doe
                address:
                  type: string
                  nullable: true
                  example: 123 Main St
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe
                  address:
                    type: string
                    nullable: true
                    example: 123 Main St
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request - Missing required fields or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and receive JWT access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/users:
    put:
      summary: Update user profile
      description: Update authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe Updated
                address:
                  type: string
                  example: 456 New Street
                image:
                  type: string
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe Updated
                  address:
                    type: string
                    nullable: true
                    example: 456 New Street
                  image:
                    type: string
                    nullable: true
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T14:30:00.000Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
    patch:
      summary: Partially update user profile
      description: Partially update authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe Updated
                address:
                  type: string
                  example: 456 New Street
                image:
                  type: string
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe Updated
                  address:
                    type: string
                    nullable: true
                    example: 456 New Street
                  image:
                    type: string
                    nullable: true
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T14:30:00.000Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/users/soft-delete:
    delete:
      summary: Soft delete user
      description: Soft delete the authenticated user's account (marks as deleted without permanently removing data)
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User soft deleted successfully
        '400':
          description: Bad request - User not found
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and registration endpoints
  - name: Users
    description: User management endpoints

