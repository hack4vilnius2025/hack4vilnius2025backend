openapi: 3.0.0
info:
  title: Hack4Vilnius 2025 Backend API
  description: Backend server API with Express, TypeScript, and TypeORM using modularized monolith architecture
  version: 1.0.0
servers:
  - url: http://localhost:3000
    description: Local development server

components:
  securitySchemes:
    BearerAuth:
      type: http
      scheme: bearer
      bearerFormat: JWT

paths:
  /health:
    get:
      summary: Health check
      description: Check if the server is running
      tags:
        - System
      responses:
        '200':
          description: Server is running
          content:
            application/json:
              schema:
                type: object
                properties:
                  status:
                    type: string
                    example: ok
                  message:
                    type: string
                    example: Server is running

  /api/auth/register:
    post:
      summary: Register new user
      description: Create a new user account
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
                - name
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
                name:
                  type: string
                  example: John Doe
                address:
                  type: string
                  nullable: true
                  example: 123 Main St
      responses:
        '201':
          description: User created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe
                  address:
                    type: string
                    nullable: true
                    example: 123 Main St
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request - Missing required fields or user already exists
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/auth/login:
    post:
      summary: Login user
      description: Authenticate user and receive JWT access token
      tags:
        - Authentication
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - email
                - password
              properties:
                email:
                  type: string
                  format: email
                  example: user@example.com
                password:
                  type: string
                  format: password
                  example: password123
      responses:
        '200':
          description: Login successful
          content:
            application/json:
              schema:
                type: object
                properties:
                  accessToken:
                    type: string
                    example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9...
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required fields
        '401':
          description: Unauthorized - Invalid credentials
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Invalid email or password
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/users:
    get:
      summary: Get user profile
      description: Get authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Profile retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe
                  address:
                    type: string
                    nullable: true
                    example: 123 Main St
                  image:
                    type: string
                    nullable: true
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
    put:
      summary: Update user profile
      description: Update authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe Updated
                address:
                  type: string
                  example: 456 New Street
                image:
                  type: string
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe Updated
                  address:
                    type: string
                    nullable: true
                    example: 456 New Street
                  image:
                    type: string
                    nullable: true
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T14:30:00.000Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
    patch:
      summary: Partially update user profile
      description: Partially update authenticated user's profile information
      tags:
        - Users
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              properties:
                name:
                  type: string
                  example: John Doe Updated
                address:
                  type: string
                  example: 456 New Street
                image:
                  type: string
                  example: https://example.com/avatar.jpg
      responses:
        '200':
          description: Profile updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  email:
                    type: string
                    example: user@example.com
                  name:
                    type: string
                    example: John Doe Updated
                  address:
                    type: string
                    nullable: true
                    example: 456 New Street
                  image:
                    type: string
                    nullable: true
                    example: https://example.com/avatar.jpg
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
                  updatedAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T14:30:00.000Z
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/users/:
    delete:
      summary: Soft delete user
      description: Soft delete the authenticated user's account (marks as deleted without permanently removing data)
      tags:
        - Users
      security:
        - BearerAuth: []
      responses:
        '204':
          description: User soft deleted successfully
        '400':
          description: Bad request - User not found
  /api/forums:
    get:
      summary: Get paginated forums
      description: Retrieve a paginated list of forums with approval counts
      tags:
        - Forums
      parameters:
        - in: query
          name: page
          schema:
            type: integer
            default: 1
            minimum: 1
          description: Page number for pagination
          example: 1
        - in: query
          name: limit
          schema:
            type: integer
            default: 10
            minimum: 1
            maximum: 100
          description: Number of items per page (max 100)
          example: 10
      responses:
        '200':
          description: Forums retrieved successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  forums:
                    type: array
                    items:
                      type: object
                      properties:
                        code:
                          type: string
                          format: uuid
                          example: 770e8400-e29b-41d4-a716-446655440002
                        userCode:
                          type: string
                          format: uuid
                          example: 660e8400-e29b-41d4-a716-446655440001
                        userName:
                          type: string
                          example: John Doe
                        userImage:
                          type: string
                          nullable: true
                          example: https://example.com/avatar.jpg
                        title:
                          type: string
                          example: My Forum Title
                        body:
                          type: string
                          example: This is the forum content
                        address:
                          type: string
                          nullable: true
                          example: 123 Main Street, Vilnius
                        createdAt:
                          type: string
                          format: date-time
                          example: 2025-10-18T10:30:00.000Z
                        approvalCount:
                          type: integer
                          example: 5
                  pagination:
                    type: object
                    properties:
                      page:
                        type: integer
                        example: 1
                      limit:
                        type: integer
                        example: 10
                      totalItems:
                        type: integer
                        example: 25
                      totalPages:
                        type: integer
                        example: 3
                      hasNextPage:
                        type: boolean
                        example: true
                      hasPreviousPage:
                        type: boolean
                        example: false
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Error retrieving forums
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error
    post:
      summary: Create new forum
      description: Create a new forum post
      tags:
        - Forums
      security:
        - BearerAuth: []
      requestBody:
        required: true
        content:
          application/json:
            schema:
              type: object
              required:
                - title
                - body
              properties:
                title:
                  type: string
                  example: My Forum Title
                body:
                  type: string
                  example: This is the forum content
                address:
                  type: string
                  nullable: true
                  example: 123 Main Street, Vilnius
      responses:
        '201':
          description: Forum created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 770e8400-e29b-41d4-a716-446655440002
                  userCode:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  title:
                    type: string
                    example: My Forum Title
                  body:
                    type: string
                    example: This is the forum content
                  address:
                    type: string
                    nullable: true
                    example: 123 Main Street, Vilnius
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request - Missing required fields
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: User not found
        '401':
          description: Unauthorized - No token provided
                    example: Missing required fields
        '401':
          description: Unauthorized
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: No token provided
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/forums/{code}:
    patch:
      summary: Update forum
      description: Update an existing forum post (only by owner)
      tags:
        - Forums
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: uuid
          description: The unique code of the forum to update
          example: 770e8400-e29b-41d4-a716-446655440002
      requestBody:
        required: true
        content:
          application/json:
             schema:
               type: object
               properties:
                 title:
                   type: string
                   example: Updated Forum Title
                 body:
                   type: string
                   example: Updated forum content
                 address:
                   type: string
                   nullable: true
                   example: 456 New Street, Vilnius
       responses:
        '200':
          description: Forum updated successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  code:
                    type: string
                    format: uuid
                    example: 770e8400-e29b-41d4-a716-446655440002
                  userCode:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                   title:
                     type: string
                     example: Updated Forum Title
                   body:
                     type: string
                     example: Updated forum content
                   address:
                     type: string
                     nullable: true
                     example: 456 New Street, Vilnius
                   createdAt:
                     type: string
                     format: date-time
                     example: 2025-10-18T10:30:00.000Z
                   updatedAt:
                     type: string
                     format: date-time
                     example: 2025-10-18T14:30:00.000Z
         '400':
           description: Bad request - Missing required fields or validation error
          content:
            application/json:
              schema:
                type: object
                 properties:
                   error:
                     type: string
                     example: At least one field (title, body, or address) must be provided for update
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '403':
          description: Forbidden - Only the creator can update this forum
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Only the creator can update this forum
        '404':
          description: Not found - Forum does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Forum not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

    delete:
      summary: Delete forum
      description: Delete a forum post (only by owner)
      tags:
        - Forums
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: code
          required: true
          schema:
            type: string
            format: uuid
          description: The unique code of the forum to delete
          example: 770e8400-e29b-41d4-a716-446655440002
      responses:
        '200':
          description: Forum deleted successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  message:
                    type: string
                    example: Forum deleted successfully
        '400':
          description: Bad request - Missing required parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required parameter: code
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '403':
          description: Forbidden - User can only delete their own forums
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: 'Unauthorized: You can only delete your own forums'
        '404':
          description: Not found - Forum does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Forum not found
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

  /api/forums/{forumCode}/approvals:
    post:
      summary: Create forum approval
      description: Create a forum approval by approving a forum post
      tags:
        - Forum Approvals
      security:
        - BearerAuth: []
      parameters:
        - in: path
          name: forumCode
          required: true
          schema:
            type: string
            format: uuid
          description: The unique code of the forum to approve
          example: 770e8400-e29b-41d4-a716-446655440002
      responses:
        '201':
          description: Forum approval created successfully
          content:
            application/json:
              schema:
                type: object
                properties:
                  userCode:
                    type: string
                    format: uuid
                    example: 660e8400-e29b-41d4-a716-446655440001
                  forumCode:
                    type: string
                    format: uuid
                    example: 770e8400-e29b-41d4-a716-446655440002
                  createdAt:
                    type: string
                    format: date-time
                    example: 2025-10-18T10:30:00.000Z
        '400':
          description: Bad request - Missing required parameter
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Missing required parameter: forumCode
  /api/users/forums:
    get:
      summary: Get current user's forums
      description: Retrieve all forum posts created by the authenticated user
      tags:
        - Forums
      security:
        - BearerAuth: []
      responses:
        '200':
          description: Forums retrieved successfully
          content:
            application/json:
              schema:
                type: array
                items:
                  type: object
                  properties:
                    code:
                      type: string
                      format: uuid
                      example: 770e8400-e29b-41d4-a716-446655440002
                    userCode:
                      type: string
                      format: uuid
                      example: 660e8400-e29b-41d4-a716-446655440001
                    userName:
                      type: string
                      example: John Doe
                    userImage:
                      type: string
                      nullable: true
                      example: https://example.com/avatar.jpg
                    title:
                      type: string
                      example: My Forum Title
                    body:
                      type: string
                      example: This is the forum content
                    address:
                      type: string
                      nullable: true
                      example: 123 Main Street, Vilnius
                    createdAt:
                      type: string
                      format: date-time
                      example: 2025-10-18T10:30:00.000Z
        '401':
          description: Unauthorized - No token provided
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Unauthorized
        '403':
          description: Forbidden - Cannot approve own forum
        '400':
          description: Bad request
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Cannot approve your own forum
        '404':
          description: Not found - Forum or user does not exist
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Forum not found
        '409':
          description: Conflict - Forum already approved by this user
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Forum already approved by this user
                    example: Error retrieving forums
        '500':
          description: Internal server error
          content:
            application/json:
              schema:
                type: object
                properties:
                  error:
                    type: string
                    example: Internal server error

tags:
  - name: System
    description: System health and status endpoints
  - name: Authentication
    description: User authentication and registration endpoints
  - name: Users
    description: User management endpoints
  - name: Forums
    description: Forum management endpoints
  - name: Forum Approvals
    description: Forum approval management endpoints

